import pandas as pd
import numpy as np
from hmmlearn import hmm
from shapely.geometry import LineString, Point

# Load GPS data from CSV
gps_data = pd.read_csv('filtered_tinkune-putalisadak.csv')

# Load road network data
road_network = {
    ("Tinkune", "Sinamangal"): LineString([
            (85.34921721708872, 27.683644654043306),
            (85.34958266294683, 27.685617127873925),
            (85.35510375252414, 27.695194992018173)
        ]),
        ("Tinkune", "New Baneshwor"): LineString([
            (85.34925758866666, 27.68369472230583),
            (85.34691978035522, 27.685646598055115),
            (85.33545338721217, 27.688229329511344)
        ]),
        ("New Baneshwor", "Old-Baneshwor"): LineString([
            (85.33548725201746, 27.688290306054128),
            (85.33601524185809, 27.690958803679862),
            (85.33620625635558, 27.691485740050425),
            (85.33621360320353, 27.692487561011546),
            (85.33691890313452, 27.69350365753492),
            (85.33713196175682, 27.694212726448583),
            (85.33736706197578, 27.69535112950264),
            (85.3376242016933, 27.695552788359763),
            (85.33752869320398, 27.696131741185013),
            (85.33775644552412, 27.697009923978115),
            (85.33838092814784, 27.69935171134368),
            (85.33882173911292, 27.700121454500575),
            (85.33929928430433, 27.700492230098746),
            (85.33965193306017, 27.70059630723287),
            (85.34010743770216, 27.70151348268817)
        ]),
        ("Sinamangal", "Old Baneshwor"): LineString([
            (85.3549534842096, 27.695330273793076),
            (85.3530373896777, 27.695698556866162),
            (85.34882829963493, 27.698194965882976),
            (85.34804734793238, 27.698596622691113),
            (85.3472376847717, 27.698911845986586),
            (85.34640547786807, 27.699225946190126),
            (85.34525060750155, 27.699361969689193),
            (85.34454073305625, 27.699638706629358),
            (85.34388914133956, 27.70004208538097),
            (85.34010140464926, 27.701519567300508)
        ]),
        ("Old Baneshwor", "Gaushala"): LineString([
            (85.34012316913311, 27.701544551450553),
            (85.34196706015445, 27.70481924945328),
            (85.34327633166595, 27.707852367371146)
        ]),
        ("Sinamangal", "Gaushala"): LineString([
            (85.3550468536805, 27.695324355991417),
            (85.35540121387135, 27.698020266393968),
            (85.35485311668526, 27.699348421943853),
            (85.35240324190397, 27.70249917288001),
            (85.35219500582122, 27.703063794371886),
            (85.35193471071733, 27.705402909429864),
            (85.35163537117847, 27.705955993392408),
            (85.35086750062163, 27.706232534298422),
            (85.35002154153239, 27.7062094892503),
            (85.3470021183245, 27.705748587253282),
            (85.34623970966254, 27.705865648208587),
            (85.34545854204214, 27.706312744604645),
            (85.34344644362216, 27.70779373833105)
        ]),
        ("New Baneshwor", "Bijulibazar"): LineString([
            (85.33546840102713, 27.68825303293741),
            (85.32994499359904, 27.689531650640248),
            (85.32820117097333, 27.69039802916035)
        ]),
        ("Bijulibazar", "Maitighar"): LineString([
            (85.32817605963487, 27.690418698210223),
            (85.32046667028033, 27.694256327145084)
        ]),
        ("Maitighar", "Putalisadak"): LineString([
            (85.32058564098173, 27.694263018318182),
            (85.32220165144992, 27.701061356807344),
            (85.32286933517292, 27.705670924023735)
        ]),
        ("Old Baneshwor", "Seto Pool"): LineString([
            (85.34009248389657, 27.701525264076125),
            (85.33608643385861, 27.70285796086995)
        ]),
        ("Gaushala", "Rato Pool"): LineString([
            (85.33680307101548, 27.708059042513682),
            (85.34044278015381, 27.70795989362925),
            (85.34102140058098, 27.708141666514706),
            (85.34161868618293, 27.70812514171989),
            (85.34311190018803, 27.707860744655704)
        ]),
        ("Rato Pool", "Hattisar"): LineString([
            (85.3221513512587, 27.71037091690735),
            (85.32589423248453, 27.710021688032924),
            (85.3302425733973, 27.70892526264832),
            (85.3317929358301, 27.708657246197063),
            (85.33325155568497, 27.708186177867518),
            (85.33679261488447, 27.708064351527867)
        ]),
        ("Bijulibazar", "Seto Pool"): LineString([
            (85.3281532702743, 27.69046225065216),
            (85.3297219574963, 27.69411901567564),
            (85.32981799957054, 27.694359961007436),
            (85.32893761388624, 27.69515365951534),
            (85.3297539715204, 27.695663891223077),
            (85.33065036421868, 27.695904833144866),
            (85.33185089015183, 27.69757723888472),
            (85.33035651745769, 27.6988578423139),
            (85.33093276990519, 27.699807406076175),
            (85.33356484331324, 27.699969436161894),
            (85.33529360065967, 27.701386678036187),
            (85.33601391621954, 27.702888934326182)
        ]),
        ("Seto Pool", "Putalisadak"): LineString([
            (85.33599447512097, 27.702907176487585),
            (85.32754831688123, 27.70537983242373),
            (85.32677875519704, 27.70534061909808),
            (85.32285896790512, 27.70564942557712)
        ])
}

# Create a dictionary to map road segments to indices
road_segment_indices = dict(zip(road_network.keys(), range(len(road_network))))

# Extract GPS coordinates and convert to numpy array
gps_coords = np.column_stack([gps_data['latitude'].values, gps_data['longitude'].values])

# Define the number of states (road segments) in the HMM
n_states = len(road_network)

# Initialize the HMM model
model = hmm.GaussianHMM(n_components=n_states, covariance_type='full')

# Train the HMM model on the GPS data
model.fit(gps_coords)

# Get the most likely sequence of states (road segments)
logprob, state_sequence = model.decode(gps_coords, algorithm='viterbi')

# Map state indices back to road segment names
matched_road_segments = [list(road_segment_indices.keys())[state] for state in state_sequence]

# Create a new DataFrame with the map matched data
matched_data = gps_data.copy()
matched_data['matched_road_segment'] = matched_road_segments

# Save the map matched data to a new CSV file
matched_data.to_csv('matched_data.csv', index=False)